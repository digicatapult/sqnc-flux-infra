name: validate-kind-e2e

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - 'renovate/**'
    paths:
      - 'clusters/kind-cluster/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  statuses: write
  checks: write

jobs:
  kubernetes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Install Flux
        uses: fluxcd/flux2/action@main
      - name: Init Kind action
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: sqnc-flux-infra
          config: ./scripts/kind-cluster-config.yaml
      - name: Install Flux to cluster
        run: flux install
      - name: Configure Git
        run: |
          git config user.name ${GITHUB_ACTOR}
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - name: Create source and kustomization on main
        if: success()
        run: |
          flux create source git flux-system \
          --url=${{ github.event.repository.html_url }} \
          --branch=main \
          --username=${GITHUB_ACTOR} \
          --password=${{ secrets.GITHUB_TOKEN }}
          flux create kustomization flux-system \
          --source=flux-system \
          --path=./clusters/kind-cluster/base
      - name: Verify Flux kustomizations
        run: |
          kubectl wait -A kustomization -l kustomize.toolkit.fluxcd.io/name=flux-system --for=condition=ready --timeout=10m
      - name: Verify Helm releases
        run: |
          kubectl wait -A helmrelease --all --for=condition=ready --timeout=10m
      - name: Patch GitOps branch to match PR
        if: success()
        run: |
          patch=${GITHUB_REF#refs/heads/}
          sed -i -r "s#(branch:).*#\1 $patch#" \
            ./clusters/kind-cluster/base/flux-system/gotk-sync.yaml
          git add ./clusters/kind-cluster/base/flux-system/gotk-sync.yaml
          git commit -am "Patch GitOps branch to match PR"
          git push -u origin $patch
      - name: Reconcile the update
        if: success()
        run: |
          flux suspend kustomization --all
          flux create source git flux-system \
          --url=${{ github.event.repository.html_url }} \
          --branch=${GITHUB_REF#refs/heads/} \
          --username=${GITHUB_ACTOR} \
          --password=${{ secrets.GITHUB_TOKEN }}
          flux resume kustomization --all
          message=$(echo ${GITHUB_REF#refs/heads/}"@sha1:"$(git log -n 1 ${GITHUB_REF#refs/heads/} --pretty=format:"%H"))
          kubectl wait kustomization --all --all-namespaces --for='jsonpath={.status.conditions[?(@.type=="Ready")].message}=Applied revision: '"$message" --timeout=10m
          kubectl get kustomizations -A
          kubectl wait helmrelease --all --all-namespaces --for=condition=ready --timeout=10m
          kubectl get helmreleases -A
      - name: Return test results
        if: success()
        run: |
          namespaces=$(kubectl get namespaces -A | tail -n +2 | awk '{print $1}')
          for ns in $(echo $namespaces); do
            jobs=$(kubectl get jobs -n $ns --ignore-not-found | grep -v "cron" | tail -n +2 | awk {'print $1'})
            if [ ! -z "$jobs" ]; then
              echo "Jobs found:"
              echo "$jobs"
              for job in $(echo $jobs); do
                hook=$(kubectl get job/$job -n $ns -o jsonpath="{.metadata.annotations.helm\.sh/hook }" | grep -Eo "test")
                if [ ! -z "$hook" ]; then
                  echo "Helm tests for $job:"
                  kubectl logs job/$job -n $ns --all-containers
                  pods=$(kubectl get pods --selector=job-name=$job -n $ns --ignore-not-found | tail -n +2 | awk '{print $1}')
                  for pod in $(echo $pods); do
                    kubectl describe pod $pod -n $ns
                  done
                fi
              done
            fi
          done
      - name: Return GitOps branch to main
        if: success()
        run: |
          sed -i -r "s#(branch:).*#\1 main#" \
            ./clusters/kind-cluster/base/flux-system/gotk-sync.yaml
          git add ./clusters/kind-cluster/base/flux-system/gotk-sync.yaml
          git commit -am "Return GitOps branch to main"
          git push -u origin ${GITHUB_REF#refs/heads/} && \
          gh api --method POST -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/check-runs \
            -f name="gotk-sync.yaml status check" \
            -f head_sha=$(git log -n 1 ${GITHUB_REF#refs/heads/} --pretty=format:"%H") \
            -f status="completed" \
            -f conclusion="success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Auto-merge PR into main
        if: success()
        run: |
          echo "GitHub event: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "Not a pull request event. Skipping auto-merge."
            exit 0
          fi

          PR_BRANCH=$(gh pr view --json headRefName -q .headRefName)
          echo "PR branch is $PR_BRANCH"

          if [[ "$PR_BRANCH" == renovate/* ]]; then
            PR_NUMBER=$(gh pr view --json number -q .number)
            echo "Merging Renovate PR #$PR_NUMBER into main"
            gh pr merge $PR_NUMBER --squash --admin --delete-branch
          else
            echo "PR is not from a Renovate branch. Skipping auto-merge."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Describe failing pods
        if: failure()
        run: |
          namespaces=$(kubectl get namespaces -A | tail -n +2 | awk '{print $1}')
          for ns in $(echo $namespaces); do
            pods=$(kubectl get pods -o jsonpath='{range .items[?(@.status.containerStatuses[-1:].state.waiting)]}{.metadata.name}: {@.status.containerStatuses[*].state.waiting.reason}{"\n"}{end}' -n $ns | tail -n +2 | awk '{print $1}')
            if [ ! -z "$pods" ]; then
              for pod in $(echo $pods); do
                kubectl describe pod $pod -n $ns
                kubectl logs $pod -n $ns
              done
            fi
          done
      - name: Debug Flux logs
        if: failure()
        run: flux logs --level=debug --all-namespaces
      - name: Return Flux log errors
        if: failure()
        run: flux logs --level=error --all-namespaces
      - name: Debug Flux controller state
        if: failure()
        run: kubectl -n flux-system get all
      - name: Debug source-controller logs
        if: failure()
        run: kubectl -n flux-system logs deploy/source-controller
      - name: Debug kustomize-controller logs
        if: failure()
        run: kubectl -n flux-system logs deploy/kustomize-controller
      - name: Debug helm-controller logs
        if: failure()
        run: kubectl -n flux-system logs deploy/helm-controller
      - name: Report all resources
        if: failure()
        run: flux get all --all-namespaces
